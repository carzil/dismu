package com.dismu.ui.pc;

import com.dismu.logging.Loggers;
import com.dismu.utils.Utils;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.IOException;

public class LoginScreen {
    private JPanel mainPanel;
    private JLabel dismuLogo;
    private JButton loginButton;
    private JPanel labelPanel;
    private JTextField usernameField;
    private JPasswordField passwordField;
    private JCheckBox keepMeLoggedInCheckBox;
    private volatile boolean isLogged = false;
    private JFrame frame;

    public LoginScreen() {
        $$$setupUI$$$();
        loginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                login();
            }
        });
    }

    private void login() {
        Loggers.uiLogger.debug("login called");
        usernameField.setEditable(false);
        passwordField.setEditable(false);
        loginButton.setEnabled(false);
        loginButton.setIcon(Icons.getLoaderIcon());
        loginButton.setText("Logging...");
        Utils.runThread(new Runnable() {
            @Override
            public void run() {
                try {
                    Thread.sleep(2000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                isLogged = true;
                loginButton.setEnabled(true);
                loginButton.setText("Login");
                loginButton.setIcon(null);
                usernameField.setEditable(true);
                usernameField.setEditable(true);
                if (isLogged) {
                    boolean keepMeLoggedIn = keepMeLoggedInCheckBox.isSelected();
                    Dismu.accountSettingsManager.setBoolean("keepLoggedIn", keepMeLoggedIn);
                    if (keepMeLoggedIn) {
                        Dismu.accountSettingsManager.setString("username", getUsername());
                        Dismu.accountSettingsManager.setString("password", getPassword());
                    } else {
                        Dismu.accountSettingsManager.setString("password", "");
                    }
                }
            }
        });
    }

    public JFrame getFrame() {
        if (frame == null) {
            frame = new JFrame("Dismu Login");
            frame.setContentPane(mainPanel);
            frame.pack();
            frame.setSize(new Dimension(400, 300));
            frame.setLocationRelativeTo(null);
            frame.setIconImage(Dismu.getIcon());
            frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
            frame.getRootPane().setDefaultButton(loginButton);
            BufferedImage logo = null;
            try {
                logo = ImageIO.read(ClassLoader.getSystemResourceAsStream("logo.png"));
                logo = Utils.createResizedCopy(logo, 219, 50);
                dismuLogo.setIcon(new ImageIcon(logo));
            } catch (IOException e) {
                Loggers.uiLogger.error("cannot load logo", e);
            }
            boolean keepLoggedIn = Dismu.accountSettingsManager.getBoolean("keepLoggedIn", false);
            if (keepLoggedIn) {
                String username = Dismu.accountSettingsManager.getString("username", "");
                String password = Dismu.accountSettingsManager.getString("password", "");
                keepMeLoggedInCheckBox.setSelected(true);
                usernameField.setText(username);
                passwordField.setText(password);
                login();
            }
        }
        return frame;
    }

    private void createUIComponents() {
    }

    public boolean isLogged() {
        return isLogged;
    }

    public String getUsername() {
        return usernameField.getText();
    }

    public String getPassword() {
        return passwordField.getText();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(2, 2, new Insets(2, 0, 0, 0), -1, -1));
        mainPanel.setBackground(new Color(-1513240));
        dismuLogo = new JLabel();
        dismuLogo.setText("");
        mainPanel.add(dismuLogo, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        labelPanel = new JPanel();
        labelPanel.setLayout(new GridLayoutManager(7, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(labelPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Username:");
        labelPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        usernameField = new JTextField();
        labelPanel.add(usernameField, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Password:");
        labelPanel.add(label2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        loginButton = new JButton();
        loginButton.setText("Login");
        labelPanel.add(loginButton, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, -1), null, 0, false));
        final Spacer spacer1 = new Spacer();
        labelPanel.add(spacer1, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        passwordField = new JPasswordField();
        labelPanel.add(passwordField, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        keepMeLoggedInCheckBox = new JCheckBox();
        keepMeLoggedInCheckBox.setText("Keep me logged in");
        labelPanel.add(keepMeLoggedInCheckBox, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
